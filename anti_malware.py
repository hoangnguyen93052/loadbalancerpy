import os
import hashlib
import json
import sys
import time
import zipfile
import requests
from pathlib import Path
from threading import Thread
from datetime import datetime


class FileScanner:
    def __init__(self, directory, db_path):
        self.directory = directory
        self.db_path = db_path
        self.malware_db = self.load_malware_db()

    def load_malware_db(self):
        if not os.path.exists(self.db_path):
            return {}
        with open(self.db_path, 'r') as db_file:
            return json.load(db_file)

    def scan_file(self, file_path):
        file_hash = self.hash_file(file_path)
        if file_hash in self.malware_db:
            print(f"[ALERT] Malware detected: {file_path} (Hash: {file_hash})")
            return True
        return False

    def hash_file(self, file_path):
        hasher = hashlib.sha256()
        with open(file_path, 'rb') as file:
            while chunk := file.read(8192):
                hasher.update(chunk)
        return hasher.hexdigest()

    def scan_directory(self):
        malware_found = False
        for root, dirs, files in os.walk(self.directory):
            for file in files:
                file_path = os.path.join(root, file)
                if self.scan_file(file_path):
                    malware_found = True
        return malware_found


class MalwareUpdater:
    def __init__(self, db_path):
        self.db_path = db_path
        self.update_url = "https://malware-database.example.com/latest"

    def download_malware_db(self):
        response = requests.get(self.update_url)
        if response.status_code != 200:
            print("Failed to download the malware database.")
            return
        with open(self.db_path, 'wb') as db_file:
            db_file.write(response.content)
        print("Malware database updated successfully.")

    def update_db(self):
        try:
            self.download_malware_db()
        except Exception as e:
            print(f"Error occurred while updating the database: {e}")


class LogManager:
    def __init__(self, log_file):
        self.log_file = log_file

    def log_event(self, message):
        with open(self.log_file, 'a') as log_file:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            log_file.write(f"{timestamp} - {message}\n")


class UserInterface:
    def __init__(self):
        self.log_manager = LogManager("malware_log.txt")

    def display_menu(self):
        print("1. Scan for malware")
        print("2. Update malware database")
        print("3. Exit")

    def handle_choice(self, choice, scanner, updater):
        if choice == '1':
            self.log_manager.log_event("Starting malware scan...")
            found = scanner.scan_directory()
            message = "Scan completed. Malware found!" if found else "Scan completed. No malware found."
            print(message)
            self.log_manager.log_event(message)
        elif choice == '2':
            self.log_manager.log_event("Starting malware database update...")
            updater.update_db()
        elif choice == '3':
            self.log_manager.log_event("Exiting program.")
            sys.exit(0)
        else:
            print("Invalid choice! Please choose again.")

    def run(self, scanner, updater):
        while True:
            self.display_menu()
            choice = input("Enter your choice: ")
            self.handle_choice(choice, scanner, updater)


def main(directory_to_scan):
    db_path = "malware_db.json"
    scanner = FileScanner(directory_to_scan, db_path)
    updater = MalwareUpdater(db_path)
    ui = UserInterface()

    # Check for an update before running the scan.
    updater.update_db()

    # Run the user interface to interact with the scanner
    ui.run(scanner, updater)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python anti_malware.py <directory_to_scan>")
        sys.exit(1)

    directory_to_scan = Path(sys.argv[1])
    if not directory_to_scan.is_dir():
        print("The provided path is not a valid directory.")
        sys.exit(1)

    main(directory_to_scan)